{"mappings":"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","sources":["lib/index.ts","lib/Praxy.ts"],"sourcesContent":["export * from './Praxy';\n","import {\n  Data,\n  Listeners,\n  Components,\n  AppContext,\n  IListener,\n  OnEvents,\n  OnFire,\n  Component,\n} from './types';\n\nexport class Praxy {\n  private data: Data;\n  private proxy: Data;\n  private listeners: Listeners = {};\n  private components: Components = {};\n\n  constructor(context?: AppContext) {\n    this.data = context?.data ?? {};\n\n    this.proxy = new Proxy(this.data, {\n      set: (data, _key, value) => {\n        const key = String(_key);\n\n        if (this.listeners[key] != null && data[key] != value) {\n          this.listeners[key]({data, key, value, self: this});\n        }\n\n        data[key] = value;\n\n        return true;\n      },\n    });\n  }\n\n  public set(\n    key: string,\n    value: unknown,\n    listener?: (context: IListener) => unknown\n  ): void {\n    if (this.listeners[key] == null && listener != null) {\n      this.listeners[key] = listener;\n    }\n\n    this.update(`[a-text=\"${key}\"]`, value);\n\n    this.proxy[key] = value;\n  }\n\n  public get(key: string): unknown {\n    return this.proxy[key];\n  }\n\n  /**\n   * Listen for data changes\n   * @param key\n   * @param listener\n   *\n   * @example\n   * App.listen('name', ({value}) => {\n   *   console.log('Value of \"name\" changed to: ', value);\n   * });\n   */\n  public listen(key: string, listener: (context: IListener) => void): void {\n    if (this.listeners[key] != null) {\n      return;\n    }\n\n    this.set(key, this.get(key), listener);\n  }\n\n  /**\n   * Bind an event on a `HTMLInputElement` to some actions\n   * @param event\n   * @param target\n   * @param fire\n   *\n   * @example\n   * .on('input', '[name=\"test-input\"]', ({self, target}) => {\n   *   self.set('name', target.value);\n   * });\n   */\n  public on(event: OnEvents, target: string, fire: OnFire): Praxy {\n    const events = ['click', 'input', 'change', 'select'];\n    const els = document.querySelectorAll(target);\n\n    if (els == null || els.length === 0 || fire == null) {\n      console.error(`Praxy->on: No possible matches for ${target}`);\n\n      return this;\n    }\n\n    if (!events.includes(event)) {\n      throw new Error(`${event} is not a valid event`);\n    }\n\n    els.forEach((el) => {\n      el.addEventListener(\n        event,\n        async ({target}) =>\n          await fire({\n            self: this,\n            target: target as HTMLInputElement,\n          })\n      );\n    });\n\n    return this;\n  }\n\n  /**\n   * Bind a value to multiple targets\n   * @param targets DOM selector or key in data\n   * @param value\n   *\n   * @example\n   * App.bind(['name', '[name=\"input-1\"]'], 'some value');\n   */\n  public bind(targets: string[], value: unknown): void {\n    targets.forEach((target: string) => {\n      if (this.data[target] != null) {\n        this.set(target, value);\n      }\n\n      if (this.getElements(target) != null) {\n        this.update(target, value);\n      }\n    });\n  }\n\n  /**\n   * Update DOM elements' value by target\n   * @param target\n   * @param value\n   *\n   * @example\n   * App.update('[name=\"test\"]', 'some value');\n   */\n  private update(target: string, value: unknown): void {\n    const els = this.getElements(target);\n\n    if (els == null) {\n      return;\n    }\n\n    els.forEach((el) => {\n      switch (el.nodeName) {\n        case 'INPUT':\n          (el as HTMLInputElement).value = `${value}`;\n          break;\n\n        default:\n          el.textContent = `${value}`;\n      }\n    });\n  }\n\n  public component(cmpt: Component): Praxy {\n    if (this.componentExists(cmpt.name)) {\n      throw new Error(`Component \"${cmpt.name}\" already exists`);\n    }\n\n    this.components[cmpt.name] = cmpt;\n\n    for (const key in this.components[cmpt.name].data) {\n      if (this.data[key] != null) {\n        throw new Error(\n          `You are not allowed to override data for property \\`${key}\\` with \"${this.components[key].data[key]}\" in ${this.components[key].name}.`\n        );\n      }\n\n      this.data[key] = this.components[cmpt.name].data[key];\n    }\n\n    const el = document.querySelector(cmpt.target ?? '#app');\n\n    if (el == null) {\n      throw new Error(`Your target parent ${cmpt.target} does not exist`);\n    }\n\n    const regex = /{{[A-Z]+}}/gi;\n    const regexMatches = cmpt.template.match(regex);\n\n    if (regexMatches == null || regexMatches.length === 0) {\n      el.insertAdjacentHTML('beforeend', cmpt.template);\n\n      return this;\n    }\n\n    const matches = regexMatches.map((x) =>\n      x.replace('{{', '').replace('}}', '')\n    );\n    const exists = matches.every((x) => this.data[x] != null);\n\n    if (!exists) {\n      throw new Error('Some of your interpolation keys does not exist');\n    }\n\n    let template: string;\n    matches.forEach((x) => {\n      template = (template ?? cmpt.template).replaceAll(\n        `{{${x}}}`,\n        `<span a-text=\"${x}\">${this.get(x)}</span>`\n      );\n    });\n\n    el.insertAdjacentHTML('beforeend', template);\n\n    return this;\n  }\n\n  public componentExists(name: string): boolean {\n    return this.components[name] != null;\n  }\n\n  private getElements(target: string): NodeList | null {\n    const els = document.querySelectorAll(target);\n\n    if (els == null || els.length === 0) {\n      return;\n    }\n\n    return els;\n  }\n}\n"],"names":[],"version":3,"file":"main.js.map","sourceRoot":"../"}